{"ast":null,"code":"import _objectSpread from\"/Users/st/Documents/carbon/front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{buyOffsets,sellOffsets}from'@api/transaction-api';import{useTranslation}from'react-i18next';import{modalStore}from'@store/modal-store';import{ModalTypes}from'@variables/modal-variables';import{rootStore}from'@store/root-store';export function useSellBuyOffsets(){const{fetchMarketplace}=rootStore.marketplaceStore;const{t}=useTranslation();const buyOffset=async(offsetsId,valueCart)=>{modalStore.push({title:t('offset.buyOffsetModalTitle'),content:t('offset.buyOffsetModalContent'),type:ModalTypes.Confirmation,onAgree:async currentModal=>{modalStore.update(_objectSpread(_objectSpread({},currentModal),{},{isLoading:true}));const response=await buyOffsets(valueCart,offsetsId);if(response.isSuccessful()){modalStore.push({title:t('offset.buyingOffsetsModalTitle'),content:t('offset.buyingOffsetsModalContent'),type:ModalTypes.Info});fetchMarketplace();}}});};const sellOffset=async(payload,offsetsId,setSellOpenDialog)=>{if(setSellOpenDialog){modalStore.push({title:t('offset.sellOffsetModalTitle'),content:t('offset.sellOffsetModalContent'),type:ModalTypes.Confirmation,onAgree:async currentModal=>{modalStore.update(_objectSpread(_objectSpread({},currentModal),{},{isLoading:true}));const response=await sellOffsets(payload,offsetsId);if(response.isSuccessful()){modalStore.push({title:t('offset.sellingOffsetsModalTitle'),content:t('offset.sellingOffsetsModalContent'),type:ModalTypes.Info});setSellOpenDialog(false);fetchMarketplace();}}});}};return{buyOffset,sellOffset};}","map":{"version":3,"names":["buyOffsets","sellOffsets","useTranslation","modalStore","ModalTypes","rootStore","useSellBuyOffsets","fetchMarketplace","marketplaceStore","t","buyOffset","offsetsId","valueCart","push","title","content","type","Confirmation","onAgree","currentModal","update","_objectSpread","isLoading","response","isSuccessful","Info","sellOffset","payload","setSellOpenDialog"],"sources":["/Users/st/Documents/carbon/front/src/components/sell-buy-offsets/sell-buy-offsets.tsx"],"sourcesContent":["import { buyOffsets, sellOffsets } from '@api/transaction-api';\nimport { useTranslation } from 'react-i18next';\nimport { SellOffsetsProps } from '@custom-types/offsets-types';\nimport { modalStore } from '@store/modal-store';\nimport { ModalTypes } from '@variables/modal-variables';\nimport { rootStore } from '@store/root-store';\n\nexport function useSellBuyOffsets() {\n  const { fetchMarketplace } = rootStore.marketplaceStore;\n  const { t } = useTranslation();\n  const buyOffset = async (offsetsId: string, valueCart: number) => {\n    modalStore.push({\n      title: t('offset.buyOffsetModalTitle'),\n      content: t('offset.buyOffsetModalContent'),\n      type: ModalTypes.Confirmation,\n      onAgree: async (currentModal) => {\n        modalStore.update({ ...currentModal, isLoading: true });\n        const response = await buyOffsets(valueCart, offsetsId);\n        if (response.isSuccessful()) {\n          modalStore.push({\n            title: t('offset.buyingOffsetsModalTitle'),\n            content: t('offset.buyingOffsetsModalContent'),\n            type: ModalTypes.Info,\n          });\n          fetchMarketplace();\n        }\n      },\n    });\n  };\n\n  const sellOffset = async (\n    payload: SellOffsetsProps,\n    offsetsId: string,\n    setSellOpenDialog?: (value: boolean) => void,\n  ) => {\n    if (setSellOpenDialog) {\n      modalStore.push({\n        title: t('offset.sellOffsetModalTitle'),\n        content: t('offset.sellOffsetModalContent'),\n        type: ModalTypes.Confirmation,\n        onAgree: async (currentModal) => {\n          modalStore.update({ ...currentModal, isLoading: true });\n          const response = await sellOffsets(payload, offsetsId);\n          if (response.isSuccessful()) {\n            modalStore.push({\n              title: t('offset.sellingOffsetsModalTitle'),\n              content: t('offset.sellingOffsetsModalContent'),\n              type: ModalTypes.Info,\n            });\n            setSellOpenDialog(false);\n            fetchMarketplace();\n          }\n        },\n      });\n    }\n  };\n\n  return { buyOffset, sellOffset };\n}\n"],"mappings":"qHAAA,OAASA,UAAU,CAAEC,WAAW,KAAQ,sBAAsB,CAC9D,OAASC,cAAc,KAAQ,eAAe,CAE9C,OAASC,UAAU,KAAQ,oBAAoB,CAC/C,OAASC,UAAU,KAAQ,4BAA4B,CACvD,OAASC,SAAS,KAAQ,mBAAmB,CAE7C,MAAO,SAAS,CAAAC,iBAAiBA,CAAA,CAAG,CAClC,KAAM,CAAEC,gBAAiB,CAAC,CAAGF,SAAS,CAACG,gBAAgB,CACvD,KAAM,CAAEC,CAAE,CAAC,CAAGP,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAAQ,SAAS,CAAG,KAAAA,CAAOC,SAAiB,CAAEC,SAAiB,GAAK,CAChET,UAAU,CAACU,IAAI,CAAC,CACdC,KAAK,CAAEL,CAAC,CAAC,4BAA4B,CAAC,CACtCM,OAAO,CAAEN,CAAC,CAAC,8BAA8B,CAAC,CAC1CO,IAAI,CAAEZ,UAAU,CAACa,YAAY,CAC7BC,OAAO,CAAE,KAAO,CAAAC,YAAY,EAAK,CAC/BhB,UAAU,CAACiB,MAAM,CAAAC,aAAA,CAAAA,aAAA,IAAMF,YAAY,MAAEG,SAAS,CAAE,IAAI,EAAE,CAAC,CACvD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAvB,UAAU,CAACY,SAAS,CAAED,SAAS,CAAC,CACvD,GAAIY,QAAQ,CAACC,YAAY,CAAC,CAAC,CAAE,CAC3BrB,UAAU,CAACU,IAAI,CAAC,CACdC,KAAK,CAAEL,CAAC,CAAC,gCAAgC,CAAC,CAC1CM,OAAO,CAAEN,CAAC,CAAC,kCAAkC,CAAC,CAC9CO,IAAI,CAAEZ,UAAU,CAACqB,IACnB,CAAC,CAAC,CACFlB,gBAAgB,CAAC,CAAC,CACpB,CACF,CACF,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAmB,UAAU,CAAG,KAAAA,CACjBC,OAAyB,CACzBhB,SAAiB,CACjBiB,iBAA4C,GACzC,CACH,GAAIA,iBAAiB,CAAE,CACrBzB,UAAU,CAACU,IAAI,CAAC,CACdC,KAAK,CAAEL,CAAC,CAAC,6BAA6B,CAAC,CACvCM,OAAO,CAAEN,CAAC,CAAC,+BAA+B,CAAC,CAC3CO,IAAI,CAAEZ,UAAU,CAACa,YAAY,CAC7BC,OAAO,CAAE,KAAO,CAAAC,YAAY,EAAK,CAC/BhB,UAAU,CAACiB,MAAM,CAAAC,aAAA,CAAAA,aAAA,IAAMF,YAAY,MAAEG,SAAS,CAAE,IAAI,EAAE,CAAC,CACvD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAtB,WAAW,CAAC0B,OAAO,CAAEhB,SAAS,CAAC,CACtD,GAAIY,QAAQ,CAACC,YAAY,CAAC,CAAC,CAAE,CAC3BrB,UAAU,CAACU,IAAI,CAAC,CACdC,KAAK,CAAEL,CAAC,CAAC,iCAAiC,CAAC,CAC3CM,OAAO,CAAEN,CAAC,CAAC,mCAAmC,CAAC,CAC/CO,IAAI,CAAEZ,UAAU,CAACqB,IACnB,CAAC,CAAC,CACFG,iBAAiB,CAAC,KAAK,CAAC,CACxBrB,gBAAgB,CAAC,CAAC,CACpB,CACF,CACF,CAAC,CAAC,CACJ,CACF,CAAC,CAED,MAAO,CAAEG,SAAS,CAAEgB,UAAW,CAAC,CAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}