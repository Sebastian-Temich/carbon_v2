{"ast":null,"code":"import React,{createContext,useContext,useMemo,useState}from'react';import{ProgressSpinner}from'primereact/progressspinner';import{useNavigate}from'react-router-dom';import{useLocalStorage}from'usehooks-ts';import{logout,signIn}from'@api/identity-api';import userStore from'@store/user-store';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthContextProvider=_ref=>{let{children}=_ref;const[_,setCurrentUser]=useLocalStorage('currentUser',undefined);const[isAuthenticated,setAuthenticated]=useState(false);const[isLoading,setIsLoadingSession]=useState(false);const navigate=useNavigate();const logIn=async signInData=>{const response=await signIn(signInData);if(response){var _userStore$user;setIsLoadingSession(true);await userStore.getUserData();const location=((_userStore$user=userStore.user)===null||_userStore$user===void 0?void 0:_userStore$user.roles[0].name.toLowerCase())||'/login';navigate(location);setIsLoadingSession(false);return true;}return false;};const logOut=async()=>{await logout();setCurrentUser(undefined);setAuthenticated(false);};const value=useMemo(()=>({logIn,logOut,isAuthenticated,// WORK IN PROGRESS\nsetAuthenticated// WORK IN PROGRESS\n}),[isAuthenticated]);if(isLoading){return/*#__PURE__*/_jsx(ProgressSpinner,{className:\"progress-spinner\"});}return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuthContext=()=>{const ctx=useContext(AuthContext);if(!ctx)throw new Error('Attempt to use authentication context outside its scope');return ctx;};","map":{"version":3,"names":["React","createContext","useContext","useMemo","useState","ProgressSpinner","useNavigate","useLocalStorage","logout","signIn","userStore","jsx","_jsx","AuthContext","undefined","AuthContextProvider","_ref","children","_","setCurrentUser","isAuthenticated","setAuthenticated","isLoading","setIsLoadingSession","navigate","logIn","signInData","response","_userStore$user","getUserData","location","user","roles","name","toLowerCase","logOut","value","className","Provider","useAuthContext","ctx","Error"],"sources":["/Users/st/Documents/carbon/front/src/context/auth-context.tsx"],"sourcesContent":["import React, { createContext, FC, ReactNode, useContext, useMemo, useState } from 'react';\n\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocalStorage } from 'usehooks-ts';\n\nimport { logout, signIn, SignInRequest } from '@api/identity-api';\nimport { IUser } from '@custom-types/user-types';\nimport userStore from '@store/user-store';\nimport { ROUTES } from '@utils/routes';\n\ninterface AuthContextValues {\n  logIn: (data: SignInRequest) => Promise<boolean>;\n  logOut: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextValues | undefined>(undefined);\nexport const AuthContextProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const [_, setCurrentUser] = useLocalStorage<IUser | undefined>('currentUser', undefined);\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [isLoading, setIsLoadingSession] = useState(false);\n  const navigate = useNavigate();\n\n  const logIn = async (signInData: SignInRequest): Promise<boolean> => {\n    const response = await signIn(signInData);\n\n    if (response) {\n      setIsLoadingSession(true);\n      await userStore.getUserData();\n\n      const location = userStore.user?.roles[0].name.toLowerCase() || '/login';\n      navigate(location);\n      setIsLoadingSession(false);\n      return true;\n    }\n\n    return false;\n  };\n\n  const logOut = async () => {\n    await logout();\n    setCurrentUser(undefined);\n    setAuthenticated(false);\n  };\n\n  const value = useMemo(\n    () => ({\n      logIn,\n      logOut,\n      isAuthenticated, // WORK IN PROGRESS\n      setAuthenticated, // WORK IN PROGRESS\n    }),\n    [isAuthenticated],\n  );\n\n  if (isLoading) {\n    return <ProgressSpinner className=\"progress-spinner\" />;\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuthContext = (): AuthContextValues => {\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error('Attempt to use authentication context outside its scope');\n  return ctx;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAiBC,UAAU,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CAE1F,OAASC,eAAe,KAAQ,4BAA4B,CAC5D,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,eAAe,KAAQ,aAAa,CAE7C,OAASC,MAAM,CAAEC,MAAM,KAAuB,mBAAmB,CAEjE,MAAO,CAAAC,SAAS,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAS1C,KAAM,CAAAC,WAAW,cAAGZ,aAAa,CAAgCa,SAAS,CAAC,CAC3E,MAAO,MAAM,CAAAC,mBAAgD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3E,KAAM,CAACE,CAAC,CAAEC,cAAc,CAAC,CAAGZ,eAAe,CAAoB,aAAa,CAAEO,SAAS,CAAC,CACxF,KAAM,CAACM,eAAe,CAAEC,gBAAgB,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACkB,SAAS,CAAEC,mBAAmB,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CACxD,KAAM,CAAAoB,QAAQ,CAAGlB,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAmB,KAAK,CAAG,KAAO,CAAAC,UAAyB,EAAuB,CACnE,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAlB,MAAM,CAACiB,UAAU,CAAC,CAEzC,GAAIC,QAAQ,CAAE,KAAAC,eAAA,CACZL,mBAAmB,CAAC,IAAI,CAAC,CACzB,KAAM,CAAAb,SAAS,CAACmB,WAAW,CAAC,CAAC,CAE7B,KAAM,CAAAC,QAAQ,CAAG,EAAAF,eAAA,CAAAlB,SAAS,CAACqB,IAAI,UAAAH,eAAA,iBAAdA,eAAA,CAAgBI,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,GAAI,QAAQ,CACxEV,QAAQ,CAACM,QAAQ,CAAC,CAClBP,mBAAmB,CAAC,KAAK,CAAC,CAC1B,MAAO,KAAI,CACb,CAEA,MAAO,MAAK,CACd,CAAC,CAED,KAAM,CAAAY,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,KAAM,CAAA3B,MAAM,CAAC,CAAC,CACdW,cAAc,CAACL,SAAS,CAAC,CACzBO,gBAAgB,CAAC,KAAK,CAAC,CACzB,CAAC,CAED,KAAM,CAAAe,KAAK,CAAGjC,OAAO,CACnB,KAAO,CACLsB,KAAK,CACLU,MAAM,CACNf,eAAe,CAAE;AACjBC,gBAAkB;AACpB,CAAC,CAAC,CACF,CAACD,eAAe,CAClB,CAAC,CAED,GAAIE,SAAS,CAAE,CACb,mBAAOV,IAAA,CAACP,eAAe,EAACgC,SAAS,CAAC,kBAAkB,CAAE,CAAC,CACzD,CAEA,mBAAOzB,IAAA,CAACC,WAAW,CAACyB,QAAQ,EAACF,KAAK,CAAEA,KAAM,CAAAnB,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CAC9E,CAAC,CAED,MAAO,MAAM,CAAAsB,cAAc,CAAGA,CAAA,GAAyB,CACrD,KAAM,CAAAC,GAAG,CAAGtC,UAAU,CAACW,WAAW,CAAC,CACnC,GAAI,CAAC2B,GAAG,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,yDAAyD,CAAC,CACpF,MAAO,CAAAD,GAAG,CACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}