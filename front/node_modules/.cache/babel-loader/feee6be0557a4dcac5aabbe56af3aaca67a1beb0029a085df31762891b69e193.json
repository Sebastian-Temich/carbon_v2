{"ast":null,"code":"import*as Yup from'yup';import{numberRegExp,numberWithComma}from'@variables/validation-regex';export const ValidationAddOffsetSchema=()=>{return Yup.object().shape({description:Yup.string().required('yup.offset.validationDescriptionRequired'),name:Yup.string().required('yup.offset.validationProjectNameRequired'),address:Yup.string().required('yup.offset.validationAddressRequired'),countryId:Yup.string().required('yup.offset.validationCountryRequired'),projectStandard:Yup.object().shape({existingProjectStandardId:Yup.string().required('yup.offset.validationProjectStandardRequired')}),unitGenerationTime:Yup.array().of(Yup.date().required('yup.offset.validationUnitGenerationDateRequired').typeError('yup.offset.validationUnitGenerationDateError')).required('yup.offset.validationUnitGenerationTimeRequired'),startDate:Yup.date().typeError('yup.offset.validationStartDateError').required('yup.offset.validationStartDateRequired'),expectedEndDate:Yup.date().min(Yup.ref('startDate'),'yup.offset.validationExpectedEndDateBeforeStartDateError').typeError('yup.offset.validationExpectedEndDateError').required('yup.offset.validationExpectedEndDateRequired'),sustainableDevelopmentGoalIds:Yup.array().typeError('yup.offset.validationSustainableDevelopmentGoalIdsError').min(1,'yup.offset.validationSustainableDevelopmentGoalIdsRequired'),circularity:Yup.string().required('yup.offset.validationCircularityRequired'),offsets:Yup.array().of(Yup.object().shape({shortDescription:Yup.string().required('yup.offset.validationShortDescriptionRequired'),unitCount:Yup.string().matches(numberRegExp,'yup.offset.validationUnitCountError').required('yup.offset.validationUnitCountRequired'),unitPrice:Yup.string().matches(numberWithComma,'yup.offset.validationUnitPriceError').required('yup.offset.validationUnitPriceRequired'),currencyId:Yup.string().required('yup.offset.validationCurrencyRequired'),unitType:Yup.object().shape({existingOffsetUnitTypeId:Yup.string().required('yup.offset.validationUnitTypeRequired')}),unitCreationYear:Yup.date().typeError('yup.offset.validationUnitCreationYearError').required('yup.offset.validationUnitCreationYearRequired'),auditUnit:Yup.object().shape({existingOffsetAuditUnitId:Yup.string().required('yup.offset.validationAuditUnitRequired')})}))});};","map":{"version":3,"names":["Yup","numberRegExp","numberWithComma","ValidationAddOffsetSchema","object","shape","description","string","required","name","address","countryId","projectStandard","existingProjectStandardId","unitGenerationTime","array","of","date","typeError","startDate","expectedEndDate","min","ref","sustainableDevelopmentGoalIds","circularity","offsets","shortDescription","unitCount","matches","unitPrice","currencyId","unitType","existingOffsetUnitTypeId","unitCreationYear","auditUnit","existingOffsetAuditUnitId"],"sources":["/Users/st/Documents/carbon/front/src/screens/offset/add-offset/validation-add-offset-schema.tsx"],"sourcesContent":["import * as Yup from 'yup';\nimport { numberRegExp, numberWithComma } from '@variables/validation-regex';\n\nexport const ValidationAddOffsetSchema = () => {\n  return Yup.object().shape({\n    description: Yup.string().required('yup.offset.validationDescriptionRequired'),\n    name: Yup.string().required('yup.offset.validationProjectNameRequired'),\n    address: Yup.string().required('yup.offset.validationAddressRequired'),\n    countryId: Yup.string().required('yup.offset.validationCountryRequired'),\n    projectStandard: Yup.object().shape({\n      existingProjectStandardId: Yup.string().required(\n        'yup.offset.validationProjectStandardRequired',\n      ),\n    }),\n    unitGenerationTime: Yup.array()\n      .of(\n        Yup.date()\n          .required('yup.offset.validationUnitGenerationDateRequired')\n          .typeError('yup.offset.validationUnitGenerationDateError'),\n      )\n      .required('yup.offset.validationUnitGenerationTimeRequired'),\n    startDate: Yup.date()\n      .typeError('yup.offset.validationStartDateError')\n      .required('yup.offset.validationStartDateRequired'),\n    expectedEndDate: Yup.date()\n      .min(Yup.ref('startDate'), 'yup.offset.validationExpectedEndDateBeforeStartDateError')\n      .typeError('yup.offset.validationExpectedEndDateError')\n      .required('yup.offset.validationExpectedEndDateRequired'),\n    sustainableDevelopmentGoalIds: Yup.array()\n      .typeError('yup.offset.validationSustainableDevelopmentGoalIdsError')\n      .min(1, 'yup.offset.validationSustainableDevelopmentGoalIdsRequired'),\n    circularity: Yup.string().required('yup.offset.validationCircularityRequired'),\n    offsets: Yup.array().of(\n      Yup.object().shape({\n        shortDescription: Yup.string().required('yup.offset.validationShortDescriptionRequired'),\n        unitCount: Yup.string()\n          .matches(numberRegExp, 'yup.offset.validationUnitCountError')\n          .required('yup.offset.validationUnitCountRequired'),\n        unitPrice: Yup.string()\n          .matches(numberWithComma, 'yup.offset.validationUnitPriceError')\n          .required('yup.offset.validationUnitPriceRequired'),\n        currencyId: Yup.string().required('yup.offset.validationCurrencyRequired'),\n        unitType: Yup.object().shape({\n          existingOffsetUnitTypeId: Yup.string().required('yup.offset.validationUnitTypeRequired'),\n        }),\n        unitCreationYear: Yup.date()\n          .typeError('yup.offset.validationUnitCreationYearError')\n          .required('yup.offset.validationUnitCreationYearRequired'),\n        auditUnit: Yup.object().shape({\n          existingOffsetAuditUnitId: Yup.string().required(\n            'yup.offset.validationAuditUnitRequired',\n          ),\n        }),\n      }),\n    ),\n  });\n};\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,GAAG,KAAM,KAAK,CAC1B,OAASC,YAAY,CAAEC,eAAe,KAAQ,6BAA6B,CAE3E,MAAO,MAAM,CAAAC,yBAAyB,CAAGA,CAAA,GAAM,CAC7C,MAAO,CAAAH,GAAG,CAACI,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CACxBC,WAAW,CAAEN,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,0CAA0C,CAAC,CAC9EC,IAAI,CAAET,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,0CAA0C,CAAC,CACvEE,OAAO,CAAEV,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,sCAAsC,CAAC,CACtEG,SAAS,CAAEX,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,sCAAsC,CAAC,CACxEI,eAAe,CAAEZ,GAAG,CAACI,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CAClCQ,yBAAyB,CAAEb,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAC9C,8CACF,CACF,CAAC,CAAC,CACFM,kBAAkB,CAAEd,GAAG,CAACe,KAAK,CAAC,CAAC,CAC5BC,EAAE,CACDhB,GAAG,CAACiB,IAAI,CAAC,CAAC,CACPT,QAAQ,CAAC,iDAAiD,CAAC,CAC3DU,SAAS,CAAC,8CAA8C,CAC7D,CAAC,CACAV,QAAQ,CAAC,iDAAiD,CAAC,CAC9DW,SAAS,CAAEnB,GAAG,CAACiB,IAAI,CAAC,CAAC,CAClBC,SAAS,CAAC,qCAAqC,CAAC,CAChDV,QAAQ,CAAC,wCAAwC,CAAC,CACrDY,eAAe,CAAEpB,GAAG,CAACiB,IAAI,CAAC,CAAC,CACxBI,GAAG,CAACrB,GAAG,CAACsB,GAAG,CAAC,WAAW,CAAC,CAAE,0DAA0D,CAAC,CACrFJ,SAAS,CAAC,2CAA2C,CAAC,CACtDV,QAAQ,CAAC,8CAA8C,CAAC,CAC3De,6BAA6B,CAAEvB,GAAG,CAACe,KAAK,CAAC,CAAC,CACvCG,SAAS,CAAC,yDAAyD,CAAC,CACpEG,GAAG,CAAC,CAAC,CAAE,4DAA4D,CAAC,CACvEG,WAAW,CAAExB,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,0CAA0C,CAAC,CAC9EiB,OAAO,CAAEzB,GAAG,CAACe,KAAK,CAAC,CAAC,CAACC,EAAE,CACrBhB,GAAG,CAACI,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CACjBqB,gBAAgB,CAAE1B,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,+CAA+C,CAAC,CACxFmB,SAAS,CAAE3B,GAAG,CAACO,MAAM,CAAC,CAAC,CACpBqB,OAAO,CAAC3B,YAAY,CAAE,qCAAqC,CAAC,CAC5DO,QAAQ,CAAC,wCAAwC,CAAC,CACrDqB,SAAS,CAAE7B,GAAG,CAACO,MAAM,CAAC,CAAC,CACpBqB,OAAO,CAAC1B,eAAe,CAAE,qCAAqC,CAAC,CAC/DM,QAAQ,CAAC,wCAAwC,CAAC,CACrDsB,UAAU,CAAE9B,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,uCAAuC,CAAC,CAC1EuB,QAAQ,CAAE/B,GAAG,CAACI,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CAC3B2B,wBAAwB,CAAEhC,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,uCAAuC,CACzF,CAAC,CAAC,CACFyB,gBAAgB,CAAEjC,GAAG,CAACiB,IAAI,CAAC,CAAC,CACzBC,SAAS,CAAC,4CAA4C,CAAC,CACvDV,QAAQ,CAAC,+CAA+C,CAAC,CAC5D0B,SAAS,CAAElC,GAAG,CAACI,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CAC5B8B,yBAAyB,CAAEnC,GAAG,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAC9C,wCACF,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}