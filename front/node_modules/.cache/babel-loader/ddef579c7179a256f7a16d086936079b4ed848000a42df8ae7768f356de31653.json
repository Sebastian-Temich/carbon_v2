{"ast":null,"code":"import _objectSpread from\"/Users/st/Documents/carbon/front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{makeAutoObservable,runInAction}from'mobx';import{deleteModerator,getModerators,patchModerator,postModerator}from'@api/moderator-api';import{ApiResponse}from'@custom-types/api-types';export default class ModeratorsStore{constructor(rootStore){this.rootStore=void 0;this._loaded=false;this._moderator={firstName:'',lastName:'',email:'',phone:''};this._moderators=new ApiResponse({data:[]});this.fetchModerators=async()=>{this.loaded=false;const fetchedUsers=await getModerators(_objectSpread(_objectSpread({},this.rootStore.filterStore.filter),this.rootStore.paginationStore.pagination));runInAction(()=>{this._moderators=fetchedUsers;});this.loaded=true;};this.setModerator=(defaultValue,rowData)=>{if(defaultValue){this._moderator={firstName:'',lastName:'',email:'',phone:''};}if(!defaultValue&&rowData){this._moderator=rowData;}};this.removeModerator=async moderatorId=>{const response=await deleteModerator(moderatorId);if(response){if(!this._moderators.data)return false;const deleted=this._moderators.data.filter(elem=>moderatorId!==elem.id);this._moderators.data=deleted;return true;}return false;};this.addModerator=async payload=>{const response=await postModerator(payload);if(response.isSuccessful()){await this.fetchModerators();}return response;};this.updateModerator=async(moderatorId,payload)=>{const response=await patchModerator(moderatorId,payload);if(response.isSuccessful()&&this._moderators.data){const objectIndex=this._moderators.data.findIndex(object=>object.id===moderatorId);this._moderators.data[objectIndex]=_objectSpread(_objectSpread({},this._moderators.data[objectIndex]),response);}return response;};this.rootStore=rootStore;makeAutoObservable(this);}set loaded(loaded){this._loaded=loaded;}get loaded(){return this._loaded;}get moderator(){return this._moderator;}get moderators(){return this._moderators;}}","map":{"version":3,"names":["makeAutoObservable","runInAction","deleteModerator","getModerators","patchModerator","postModerator","ApiResponse","ModeratorsStore","constructor","rootStore","_loaded","_moderator","firstName","lastName","email","phone","_moderators","data","fetchModerators","loaded","fetchedUsers","_objectSpread","filterStore","filter","paginationStore","pagination","setModerator","defaultValue","rowData","removeModerator","moderatorId","response","deleted","elem","id","addModerator","payload","isSuccessful","updateModerator","objectIndex","findIndex","object","moderator","moderators"],"sources":["/Users/st/Documents/carbon/front/src/store/moderators-store.ts"],"sourcesContent":["import { makeAutoObservable, runInAction } from 'mobx';\nimport { GetModeratorsResponse, ModeratorResponse, UserProps } from '@custom-types/user-types';\nimport { PostModeratorProps } from '@custom-types/moderator-types';\nimport { deleteModerator, getModerators, patchModerator, postModerator } from '@api/moderator-api';\nimport { ApiResponse } from '@custom-types/api-types';\nimport { RootStore } from './root-store';\n\nexport default class ModeratorsStore {\n  rootStore: RootStore;\n\n  private _loaded = false;\n\n  private _moderator: PostModeratorProps = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '' as unknown as number,\n  };\n\n  private _moderators: ApiResponse<GetModeratorsResponse> = new ApiResponse<GetModeratorsResponse>({\n    data: [],\n  });\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  fetchModerators = async () => {\n    this.loaded = false;\n    const fetchedUsers = await getModerators({\n      ...this.rootStore.filterStore.filter,\n      ...this.rootStore.paginationStore.pagination,\n    });\n    runInAction(() => {\n      this._moderators = fetchedUsers;\n    });\n    this.loaded = true;\n  };\n\n  setModerator = (defaultValue: boolean, rowData?: ModeratorResponse) => {\n    if (defaultValue) {\n      this._moderator = {\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '' as unknown as number,\n      };\n    }\n    if (!defaultValue && rowData) {\n      this._moderator = rowData;\n    }\n  };\n\n  removeModerator = async (moderatorId: string) => {\n    const response = await deleteModerator(moderatorId);\n    if (response) {\n      if (!this._moderators.data) return false;\n      const deleted = this._moderators.data.filter((elem) => moderatorId !== elem.id);\n      this._moderators.data = deleted;\n      return true;\n    }\n    return false;\n  };\n\n  addModerator = async (payload: UserProps): Promise<ApiResponse<{ password: string }>> => {\n    const response = await postModerator(payload);\n    if (response.isSuccessful()) {\n      await this.fetchModerators();\n    }\n    return response;\n  };\n\n  updateModerator = async (\n    moderatorId: string,\n    payload: UserProps,\n  ): Promise<ApiResponse<ModeratorResponse>> => {\n    const response = await patchModerator(moderatorId, payload);\n    if (response.isSuccessful() && this._moderators.data) {\n      const objectIndex = this._moderators.data.findIndex((object) => object.id === moderatorId);\n      this._moderators.data[objectIndex] = { ...this._moderators.data[objectIndex], ...response };\n    }\n    return response;\n  };\n\n  set loaded(loaded: boolean) {\n    this._loaded = loaded;\n  }\n\n  get loaded() {\n    return this._loaded;\n  }\n\n  get moderator() {\n    return this._moderator;\n  }\n\n  get moderators() {\n    return this._moderators;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}