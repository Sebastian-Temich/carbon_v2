{"ast":null,"code":"import{useEffect,useState}from'react';import{getOffsetLogs}from'@api/offset-logs-api';export const useOffsetLogs=_ref=>{let{projectId,page=1,perPage=10}=_ref;const[isLoading,setIsLoading]=useState(false);const[isRefetching,setIsRefetching]=useState(false);const[offsetLogs,setOffsetLogs]=useState([]);const[itemsCount,setItemsCount]=useState(0);const[projectGeneralInfo,setProjectGeneralInfo]=useState(null);const buildGetOffsetLogsArgs=()=>({projectIds:[String(projectId)],page,perPage});const fetchOffsetLogs=async()=>{if(isLoading)return;setIsLoading(true);const getOffsetLogsArgs=buildGetOffsetLogsArgs();const{data:offsetLogsData,pagination:offsetLogsPagination}=await getOffsetLogs(getOffsetLogsArgs);if(offsetLogsData){setOffsetLogs(offsetLogsData.offsetLogs);setProjectGeneralInfo(offsetLogsData);}if(offsetLogsPagination){setItemsCount(offsetLogsPagination.totalCount);}setIsLoading(false);};const refetchOffsetLogs=async()=>{if(isRefetching)return;setIsRefetching(true);const getOffsetLogsArgs=buildGetOffsetLogsArgs();const{data:offsetLogsData,pagination:offsetLogsPagination}=await getOffsetLogs(getOffsetLogsArgs);if(offsetLogsData){setOffsetLogs(offsetLogsData.offsetLogs);}if(offsetLogsPagination){setItemsCount(offsetLogsPagination.totalCount);}setIsRefetching(false);};useEffect(()=>{fetchOffsetLogs();},[]);useEffect(()=>{refetchOffsetLogs();},[page,perPage]);return{offsetLogs,isLoading,isRefetching,itemsCount,projectGeneralInfo};};","map":{"version":3,"names":["useEffect","useState","getOffsetLogs","useOffsetLogs","_ref","projectId","page","perPage","isLoading","setIsLoading","isRefetching","setIsRefetching","offsetLogs","setOffsetLogs","itemsCount","setItemsCount","projectGeneralInfo","setProjectGeneralInfo","buildGetOffsetLogsArgs","projectIds","String","fetchOffsetLogs","getOffsetLogsArgs","data","offsetLogsData","pagination","offsetLogsPagination","totalCount","refetchOffsetLogs"],"sources":["/Users/st/Documents/carbon/front/src/hooks/offset-logs.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { getOffsetLogs } from '@api/offset-logs-api';\nimport { OffsetLog, OffsetLogsProjectGeneralInfo } from '@custom-types/offset-logs-types';\nimport { PaginationQueryParams } from '@custom-types/api-types';\n\ninterface UseOffsetLogsArgs extends PaginationQueryParams {\n  projectId: string;\n}\n\nexport const useOffsetLogs = ({ projectId, page = 1, perPage = 10 }: UseOffsetLogsArgs) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRefetching, setIsRefetching] = useState(false);\n  const [offsetLogs, setOffsetLogs] = useState<OffsetLog[]>([]);\n  const [itemsCount, setItemsCount] = useState(0);\n  const [projectGeneralInfo, setProjectGeneralInfo] = useState<OffsetLogsProjectGeneralInfo | null>(\n    null,\n  );\n\n  const buildGetOffsetLogsArgs = () => ({\n    projectIds: [String(projectId)],\n    page,\n    perPage,\n  });\n\n  const fetchOffsetLogs = async () => {\n    if (isLoading) return;\n\n    setIsLoading(true);\n\n    const getOffsetLogsArgs = buildGetOffsetLogsArgs();\n    const { data: offsetLogsData, pagination: offsetLogsPagination } = await getOffsetLogs(\n      getOffsetLogsArgs,\n    );\n\n    if (offsetLogsData) {\n      setOffsetLogs(offsetLogsData.offsetLogs);\n      setProjectGeneralInfo(offsetLogsData);\n    }\n\n    if (offsetLogsPagination) {\n      setItemsCount(offsetLogsPagination.totalCount);\n    }\n\n    setIsLoading(false);\n  };\n\n  const refetchOffsetLogs = async () => {\n    if (isRefetching) return;\n\n    setIsRefetching(true);\n\n    const getOffsetLogsArgs = buildGetOffsetLogsArgs();\n    const { data: offsetLogsData, pagination: offsetLogsPagination } = await getOffsetLogs(\n      getOffsetLogsArgs,\n    );\n\n    if (offsetLogsData) {\n      setOffsetLogs(offsetLogsData.offsetLogs);\n    }\n\n    if (offsetLogsPagination) {\n      setItemsCount(offsetLogsPagination.totalCount);\n    }\n\n    setIsRefetching(false);\n  };\n\n  useEffect(() => {\n    fetchOffsetLogs();\n  }, []);\n\n  useEffect(() => {\n    refetchOffsetLogs();\n  }, [page, perPage]);\n\n  return { offsetLogs, isLoading, isRefetching, itemsCount, projectGeneralInfo };\n};\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,aAAa,KAAQ,sBAAsB,CAQpD,MAAO,MAAM,CAAAC,aAAa,CAAGC,IAAA,EAA8D,IAA7D,CAAEC,SAAS,CAAEC,IAAI,CAAG,CAAC,CAAEC,OAAO,CAAG,EAAsB,CAAC,CAAAH,IAAA,CACpF,KAAM,CAACI,SAAS,CAAEC,YAAY,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACS,YAAY,CAAEC,eAAe,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACW,UAAU,CAAEC,aAAa,CAAC,CAAGZ,QAAQ,CAAc,EAAE,CAAC,CAC7D,KAAM,CAACa,UAAU,CAAEC,aAAa,CAAC,CAAGd,QAAQ,CAAC,CAAC,CAAC,CAC/C,KAAM,CAACe,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGhB,QAAQ,CAC1D,IACF,CAAC,CAED,KAAM,CAAAiB,sBAAsB,CAAGA,CAAA,IAAO,CACpCC,UAAU,CAAE,CAACC,MAAM,CAACf,SAAS,CAAC,CAAC,CAC/BC,IAAI,CACJC,OACF,CAAC,CAAC,CAEF,KAAM,CAAAc,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAIb,SAAS,CAAE,OAEfC,YAAY,CAAC,IAAI,CAAC,CAElB,KAAM,CAAAa,iBAAiB,CAAGJ,sBAAsB,CAAC,CAAC,CAClD,KAAM,CAAEK,IAAI,CAAEC,cAAc,CAAEC,UAAU,CAAEC,oBAAqB,CAAC,CAAG,KAAM,CAAAxB,aAAa,CACpFoB,iBACF,CAAC,CAED,GAAIE,cAAc,CAAE,CAClBX,aAAa,CAACW,cAAc,CAACZ,UAAU,CAAC,CACxCK,qBAAqB,CAACO,cAAc,CAAC,CACvC,CAEA,GAAIE,oBAAoB,CAAE,CACxBX,aAAa,CAACW,oBAAoB,CAACC,UAAU,CAAC,CAChD,CAEAlB,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAED,KAAM,CAAAmB,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAIlB,YAAY,CAAE,OAElBC,eAAe,CAAC,IAAI,CAAC,CAErB,KAAM,CAAAW,iBAAiB,CAAGJ,sBAAsB,CAAC,CAAC,CAClD,KAAM,CAAEK,IAAI,CAAEC,cAAc,CAAEC,UAAU,CAAEC,oBAAqB,CAAC,CAAG,KAAM,CAAAxB,aAAa,CACpFoB,iBACF,CAAC,CAED,GAAIE,cAAc,CAAE,CAClBX,aAAa,CAACW,cAAc,CAACZ,UAAU,CAAC,CAC1C,CAEA,GAAIc,oBAAoB,CAAE,CACxBX,aAAa,CAACW,oBAAoB,CAACC,UAAU,CAAC,CAChD,CAEAhB,eAAe,CAAC,KAAK,CAAC,CACxB,CAAC,CAEDX,SAAS,CAAC,IAAM,CACdqB,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAENrB,SAAS,CAAC,IAAM,CACd4B,iBAAiB,CAAC,CAAC,CACrB,CAAC,CAAE,CAACtB,IAAI,CAAEC,OAAO,CAAC,CAAC,CAEnB,MAAO,CAAEK,UAAU,CAAEJ,SAAS,CAAEE,YAAY,CAAEI,UAAU,CAAEE,kBAAmB,CAAC,CAChF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}