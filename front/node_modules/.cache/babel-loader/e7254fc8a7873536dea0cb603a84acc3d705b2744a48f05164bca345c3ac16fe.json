{"ast":null,"code":"import _objectSpread from\"/Users/st/Documents/carbon/front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useTranslation}from'react-i18next';// This hook is to translate tables columns\nexport const useInvestorWalletTableColumnCells=()=>{const{t}=useTranslation();const investorWalletTableColumnCells=[{id:'project.name',label:t('investorwallet.name'),minWidth:'150px',width:'25%'},{id:'unitCount',label:t('investorwallet.unitCount'),minWidth:'150px',width:'25%'},{id:'unitPrice',label:t('investorwallet.unitPrice'),minWidth:'150px',width:'15%'},{id:'offsetStatus.name',label:t('investorwallet.status'),minWidth:'150px',width:'15%'}];const investorWalletGlobalFilterFields=['project.name','unitCount','unitPrice','offsetStatus.name'];return{investorWalletTableColumnCells,investorWalletGlobalFilterFields};};export const useTranslatedTableColumnCells=_ref=>{let{columnCells}=_ref;const{t}=useTranslation();const translatedColumnCells=columnCells.map(columnCell=>_objectSpread(_objectSpread({},columnCell),{},{label:t(columnCell.label)}));return{translatedColumnCells};};","map":{"version":3,"names":["useTranslation","useInvestorWalletTableColumnCells","t","investorWalletTableColumnCells","id","label","minWidth","width","investorWalletGlobalFilterFields","useTranslatedTableColumnCells","_ref","columnCells","translatedColumnCells","map","columnCell","_objectSpread"],"sources":["/Users/st/Documents/carbon/front/src/hooks/translation-hook.tsx"],"sourcesContent":["import { TableColumnCell } from '@custom-types/data-table-types';\nimport { useTranslation } from 'react-i18next';\n\n// This hook is to translate tables columns\nexport const useInvestorWalletTableColumnCells = () => {\n  const { t } = useTranslation();\n  const investorWalletTableColumnCells: TableColumnCell[] = [\n    { id: 'project.name', label: t('investorwallet.name'), minWidth: '150px', width: '25%' },\n    { id: 'unitCount', label: t('investorwallet.unitCount'), minWidth: '150px', width: '25%' },\n    { id: 'unitPrice', label: t('investorwallet.unitPrice'), minWidth: '150px', width: '15%' },\n    { id: 'offsetStatus.name', label: t('investorwallet.status'), minWidth: '150px', width: '15%' },\n  ];\n\n  const investorWalletGlobalFilterFields: string[] = [\n    'project.name',\n    'unitCount',\n    'unitPrice',\n    'offsetStatus.name',\n  ];\n\n  return { investorWalletTableColumnCells, investorWalletGlobalFilterFields };\n};\n\ninterface UseTranslatedTableColumnCellsArgs {\n  columnCells: TableColumnCell[];\n}\n\nexport const useTranslatedTableColumnCells = ({\n  columnCells,\n}: UseTranslatedTableColumnCellsArgs) => {\n  const { t } = useTranslation();\n  const translatedColumnCells: TableColumnCell[] = columnCells.map((columnCell) => ({\n    ...columnCell,\n    label: t(columnCell.label),\n  }));\n\n  return { translatedColumnCells };\n};\n"],"mappings":"qHACA,OAASA,cAAc,KAAQ,eAAe,CAE9C;AACA,MAAO,MAAM,CAAAC,iCAAiC,CAAGA,CAAA,GAAM,CACrD,KAAM,CAAEC,CAAE,CAAC,CAAGF,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAAG,8BAAiD,CAAG,CACxD,CAAEC,EAAE,CAAE,cAAc,CAAEC,KAAK,CAAEH,CAAC,CAAC,qBAAqB,CAAC,CAAEI,QAAQ,CAAE,OAAO,CAAEC,KAAK,CAAE,KAAM,CAAC,CACxF,CAAEH,EAAE,CAAE,WAAW,CAAEC,KAAK,CAAEH,CAAC,CAAC,0BAA0B,CAAC,CAAEI,QAAQ,CAAE,OAAO,CAAEC,KAAK,CAAE,KAAM,CAAC,CAC1F,CAAEH,EAAE,CAAE,WAAW,CAAEC,KAAK,CAAEH,CAAC,CAAC,0BAA0B,CAAC,CAAEI,QAAQ,CAAE,OAAO,CAAEC,KAAK,CAAE,KAAM,CAAC,CAC1F,CAAEH,EAAE,CAAE,mBAAmB,CAAEC,KAAK,CAAEH,CAAC,CAAC,uBAAuB,CAAC,CAAEI,QAAQ,CAAE,OAAO,CAAEC,KAAK,CAAE,KAAM,CAAC,CAChG,CAED,KAAM,CAAAC,gCAA0C,CAAG,CACjD,cAAc,CACd,WAAW,CACX,WAAW,CACX,mBAAmB,CACpB,CAED,MAAO,CAAEL,8BAA8B,CAAEK,gCAAiC,CAAC,CAC7E,CAAC,CAMD,MAAO,MAAM,CAAAC,6BAA6B,CAAGC,IAAA,EAEJ,IAFK,CAC5CC,WACiC,CAAC,CAAAD,IAAA,CAClC,KAAM,CAAER,CAAE,CAAC,CAAGF,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAAY,qBAAwC,CAAGD,WAAW,CAACE,GAAG,CAAEC,UAAU,EAAAC,aAAA,CAAAA,aAAA,IACvED,UAAU,MACbT,KAAK,CAAEH,CAAC,CAACY,UAAU,CAACT,KAAK,CAAC,EAC1B,CAAC,CAEH,MAAO,CAAEO,qBAAsB,CAAC,CAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}