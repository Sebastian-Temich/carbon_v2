"""initial

Revision ID: 94ccd2b39ea9
Revises: 
Create Date: 2023-01-09 23:31:27.515697

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '94ccd2b39ea9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.Column('NIP', sa.Text(), nullable=False),
                    sa.Column('REGON', sa.Text(), nullable=False),
                    sa.Column('KRS', sa.Text(), nullable=False),
                    sa.Column('representatives', sa.ARRAY(sa.Text()), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    op.create_table('countries',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('alpha3_code', sa.String(length=3), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('alpha3_code'),
                    sa.UniqueConstraint('name'),
                    schema='carbon'
                    )
    op.create_table('currencies',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('code', sa.String(length=3), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('code'),
                    schema='carbon'
                    )
    op.create_table('offset_audit_units',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='carbon'
                    )
    op.create_table('offset_statuses',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='carbon'
                    )
    op.create_table('offset_unit_types',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='carbon'
                    )
    op.create_table('project_standards',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='carbon'
                    )
    op.create_table('roles',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='carbon'
                    )
    op.create_table('sustainable_development_goals',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.Column('image_uri', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    op.create_table('users',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('email', sa.Text(), nullable=False),
                    sa.Column('password', sa.String(length=60), nullable=False),
                    sa.Column('first_name', sa.Text(), nullable=False),
                    sa.Column('last_name', sa.Text(), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    schema='carbon'
                    )
    op.create_table('company_addresses',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('street', sa.Text(), nullable=False),
                    sa.Column('city', sa.Text(), nullable=False),
                    sa.Column('postal_code', sa.Text(), nullable=False),
                    sa.Column('company_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['company_id'], ['carbon.companies.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    op.create_table('customers',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('phone_number', sa.Text(), nullable=False),
                    sa.Column('identity_card_number', sa.Text(), nullable=False),
                    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('company_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['company_id'], ['carbon.companies.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['carbon.users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    op.create_table('projects',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('name', sa.Text(), nullable=False),
                    sa.Column('description', sa.Text(), nullable=False),
                    sa.Column('address', sa.Text(), nullable=False),
                    sa.Column('start_date', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('expected_end_date', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('unit_generation_start_date', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('unit_generation_end_date', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('circularity', sa.Text(), nullable=False),
                    sa.Column('country_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('project_standard_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('company_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['company_id'], ['carbon.companies.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['country_id'], ['carbon.countries.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['project_standard_id'], ['carbon.project_standards.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    op.create_table('user_roles',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['carbon.roles.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['carbon.users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    op.create_table('offsets',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('short_description', sa.Text(), nullable=False),
                    sa.Column('unit_count', sa.Integer(), nullable=False),
                    sa.Column('unit_creation_year', sa.Date(), nullable=False),
                    sa.Column('unit_price', sa.Numeric(precision=10, scale=1), nullable=False),
                    sa.Column('offset_status_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('currency_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('unit_type_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('audit_unit_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('owned_by_company_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['audit_unit_id'], ['carbon.offset_audit_units.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['currency_id'], ['carbon.currencies.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['offset_status_id'], ['carbon.offset_statuses.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['owned_by_company_id'], ['carbon.companies.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['project_id'], ['carbon.projects.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['unit_type_id'], ['carbon.offset_unit_types.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    op.create_table('project_sustainable_development_goals',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('sustainable_development_goal_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['project_id'], ['carbon.projects.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['sustainable_development_goal_id'],
                                            ['carbon.sustainable_development_goals.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='carbon'
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('project_sustainable_development_goals', schema='carbon')
    op.drop_table('offsets', schema='carbon')
    op.drop_table('user_roles', schema='carbon')
    op.drop_table('projects', schema='carbon')
    op.drop_table('customers', schema='carbon')
    op.drop_table('company_addresses', schema='carbon')
    op.drop_table('users', schema='carbon')
    op.drop_table('sustainable_development_goals', schema='carbon')
    op.drop_table('roles', schema='carbon')
    op.drop_table('project_standards', schema='carbon')
    op.drop_table('offset_unit_types', schema='carbon')
    op.drop_table('offset_statuses', schema='carbon')
    op.drop_table('offset_audit_units', schema='carbon')
    op.drop_table('currencies', schema='carbon')
    op.drop_table('countries', schema='carbon')
    op.drop_table('companies', schema='carbon')
    # ### end Alembic commands ###
